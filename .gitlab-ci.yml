variables:
  BIN_NAME: "certbot"
  GIT_STRATEGY: clone


#do_lock:
#   stage: lock
#   only:
#    - build
#   tags:
#    - golang
#    - dev
#   script:
#    - lockfile -r 0 /tmp/build.lock || exit 1
    
#do_unlock:
#   stage: unlock
#   only:
#    - build
#   tags:
#    - golang
#    - dev
#   script:
#    - rm -f /tmp/build.lock 

#after_script:
#    - echo $?


do_build:
  stage: build
  tags:
    - golang
    - dev
  only:
    - build
  script:
    - export GOPATH=$(pwd)
    - cat certbot/uc_accr.list
    - mkdir src 
    - mv certbot ./src/
    - pushd src/certbot > /dev/null
    - go get ./...
    - go build -o ${BIN_NAME}
    - popd > /dev/null
    - rm -rf src/certbot/parser.go
    - mv src/certbot .
  artifacts:
    paths:
      - ${BIN_NAME}
    when: on_success
    expire_in: 1 day
  environment:
    name: m1ke

do_notify_success:
  stage: notify
  tags:
    - golang
  only:
    - build
  script:
    - /usr/local/bin/tgbot -msg "прошла успешная сборка *${CI_PROJECT_NAME}* ветки *${CI_COMMIT_REF_NAME}* [pipeline](${CI_PROJECT_URL}/pipelines/${CI_PIPELINE_ID})" || /bin/true
  when: on_success


do_notify_failure:
  stage: notify
  tags:
    - golang
  only:
    - build
  script:
    - /usr/local/bin/tgbot -fail -msg "сборка провалилась *${CI_PROJECT_NAME}* ветки *${CI_COMMIT_REF_NAME}* [pipeline](${CI_PROJECT_URL}/pipelines/${CI_PIPELINE_ID})" || /bin/true
  when: on_failure

stages:
# - lock
  - build
  - notify
# - unlock